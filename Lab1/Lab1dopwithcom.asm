data segment
    a dw 159              ; Определение переменной `a` с начальным значением 159 (слово)
    b dw 15               ; Определение переменной `b` с начальным значением 15 (слово)
    c dw 4                ; Определение переменной `c` с начальным значением 4 (слово)
    d dw 78               ; Определение переменной `d` с начальным значением 78 (слово)
    result dw 0           ; Переменная для хранения результата (слово), начальное значение 0
    buffer db 6 dup(0)    ; Буфер для вывода результата в десятичной системе, 6 байт
    hex_buffer db 5 dup(0); Буфер для вывода результата в шестнадцатеричной системе, 5 байт
    space db ' ', '$'     ; Строка для вывода пробела и окончания строки ('$' — знак конца строки в DOS)
data ends

code segment
start:
    mov ax, data          ; Загружаем сегмент данных в регистр AX
    mov ds, ax            ; Копируем значение AX в регистр DS для работы с сегментом данных
    
    mov ax, [a]           ; Загружаем значение переменной `a` в регистр AX
    mov dx, 0             ; Обнуляем регистр DX (старшая часть для деления)
    mov bx, [b]           ; Загружаем значение переменной `b` в регистр BX
    div bx                ; Делим AX на BX (AX / BX), результат в AX, остаток в DX
    mov bx, ax            ; Сохраняем результат деления в BX
    
    mov ax, [d]           ; Загружаем значение переменной `d` в AX
    mov dx, 0             ; Обнуляем регистр DX
    mov cx, [c]           ; Загружаем значение переменной `c` в CX
    div cx                ; Делим AX на CX (AX / CX), результат в AX, остаток в DX

    add ax, bx            ; Складываем результат первого деления с текущим значением в AX
    sub ax, 1             ; Вычитаем 1 из результата
    mov [result], ax      ; Сохраняем итоговый результат в переменную `result`
    
    mov si, offset buffer ; Загружаем адрес буфера для десятичного вывода в SI
    add si, 5             ; Увеличиваем указатель SI на 5 (чтобы начать запись с конца буфера)
    mov bx, si            ; Копируем значение указателя в BX для работы с буфером
    mov cx, 0             ; Обнуляем регистр CX (счетчик цифр)
    mov ax, [result]      ; Загружаем результат в AX
    cmp ax, 0             ; Сравниваем AX с 0
    jne dec_convert_loop  ; Если не равно нулю, переходим к циклу преобразования в десятичную форму
    mov byte ptr [bx], '0'; Если результат равен 0, записываем символ '0' в буфер
    mov byte ptr [bx+1], '$'; Записываем символ конца строки '$'
    mov dx, bx            ; Загружаем адрес буфера в DX
    mov ah, 09h           ; Функция DOS для вывода строки
    int 21h               ; Прерывание DOS для выполнения вывода строки
    jmp space_output      ; Переход к следующему этапу вывода

dec_convert_loop:
    mov dx, 0             ; Обнуляем DX перед делением
    mov si, 10            ; Подготавливаем для деления на 10 (десятичная система)
    div si                ; AX / 10, результат в AX, остаток в DL (младшая цифра)
    add dl, '0'           ; Преобразуем число в ASCII-символ
    mov [bx], dl          ; Записываем символ в буфер
    dec bx                ; Переходим к следующей позиции в буфере
    inc cx                ; Увеличиваем счетчик цифр
    cmp ax, 0             ; Проверяем, все ли цифры обработаны
    jne dec_convert_loop  ; Если нет, продолжаем цикл
    inc bx                ; Сдвигаем указатель на начало числа
    mov si, cx            ; Загружаем количество символов в SI
    add si, bx            ; Вычисляем адрес конца строки
    mov byte ptr [si], '$'; Записываем символ конца строки '$'
    mov dx, bx            ; Подготавливаем DX для вывода
    mov ah, 09h           ; Функция DOS для вывода строки
    int 21h               ; Прерывание DOS для вывода строки

space_output:
    mov dx, offset space  ; Загружаем адрес строки с пробелом в DX
    mov ah, 09h           ; Функция DOS для вывода строки
    int 21h               ; Прерывание DOS для вывода строки
    jmp hex_output        ; Переход к следующему этапу вывода

hex_output:
    mov si, offset hex_buffer ; Загружаем адрес буфера для вывода в шестнадцатеричной системе в SI
    add si, 4             ; Сдвигаем указатель на 4 позиции вперед (начинаем запись с конца буфера)
    mov bx, si            ; Копируем значение указателя в BX
    mov cx, 0             ; Обнуляем регистр CX (счетчик символов)
    mov ax, [result]      ; Загружаем результат в AX
    cmp ax, 0             ; Проверяем, равен ли результат нулю
    jne hex_convert_loop  ; Если нет, переходим к циклу преобразования в шестнадцатеричную форму
    mov byte ptr [bx], '0'; Если результат равен 0, записываем '0' в буфер
    mov byte ptr [bx+1], 'h'; Записываем символ 'h' для обозначения шестнадцатеричной системы
    mov byte ptr [bx+2], '$'; Записываем символ конца строки '$'
    mov dx, bx            ; Подготавливаем DX для вывода
    mov ah, 09h           ; Функция DOS для вывода строки
    int 21h               ; Прерывание DOS для вывода строки
    jmp exit_program      ; Переход к завершению программы

hex_convert_loop:
    mov dx, 0             ; Обнуляем DX перед делением
    mov si, 16            ; Подготавливаем для деления на 16 (шестнадцатеричная система)
    div si                ; AX / 16, результат в AX, остаток в DL (младший разряд)
    cmp dl, 9             ; Проверяем, меньше ли остаток 10
    jle hex_digit         ; Если меньше или равно 9, переходим к преобразованию в цифру
    add dl, 7             ; Если больше 9, добавляем 7, чтобы преобразовать в букву (A-F)
hex_digit:
    add dl, '0'           ; Преобразуем в ASCII-символ
    mov [bx], dl          ; Записываем символ в буфер
    dec bx                ; Переходим к следующей позиции в буфере
    inc cx                ; Увеличиваем счетчик символов
    cmp ax, 0             ; Проверяем, все ли цифры обработаны
    jne hex_convert_loop  ; Если нет, продолжаем цикл
    inc bx                ; Сдвигаем указатель на начало числа
    mov si, cx            ; Загружаем количество символов в SI
    add si, bx            ; Вычисляем адрес конца строки
    mov byte ptr [si], 'h'; Записываем символ 'h' в конце строки
    inc si                ; Сдвигаем указатель для записи конца строки
    mov byte ptr [si], '$'; Записываем символ конца строки '$'
    mov dx, bx            ; Подготавливаем DX для вывода
    mov ah, 09h           ; Функция DOS для вывода строки
    int 21h               ; Прерывание DOS для вывода строки

exit_program:
    mov ah, 4Ch           ; Функция завершения программы
    int 21h               ; Прерывание DOS для завершения программы

code ends
end start
