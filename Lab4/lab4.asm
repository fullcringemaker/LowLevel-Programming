assume CS:code, DS:data

data segment
    msg db "Hello, world!$"
    var dd 0       ; Переменная типа двойное слово (4 байта)
    data ends

code segment
start:
    mov AX, data
    mov DS, AX

    ; Вывод сообщения
    mov AH, 09h
    mov DX, offset msg
    int 21h

    ; Пример использования макроса PUSHM
    mov EAX, 12345678h  ; Поместим значение в EAX для теста
    PUSHM var           ; Используем макрос для записи в переменную типа двойное слово

    ; Пример использования макроса POPM
    POPM var            ; Используем макрос для чтения значения из переменной

    ; Пример использования макроса CALLM
    CALLM MyProc        ; Вызов процедуры с помощью макроса

    ; Пример использования макроса RETM
    RETM 0              ; Возврат из процедуры с аргументом 0

    ; Пример использования макроса LOOPM
    LOOPM LoopLabel     ; Цикл с использованием макроса

    ; Завершение программы
    mov AH, 4Ch
    int 21h

; Макросы
PUSHM MACRO X
    ; Проверяем существование переменной X
    ; (на уровне компилятора, можно добавлять свои проверки на этапе компиляции)
    ; Сохраняем значение переменной X в памяти
    mov EAX, X         ; Загружаем значение переменной X в регистр EAX
    push EAX           ; Сохраняем значение EAX на стеке
ENDM

POPM MACRO X
    ; Проверяем существование переменной X
    ; Восстанавливаем значение из стека в переменную X
    pop EAX            ; Извлекаем значение из стека в регистр EAX
    mov X, EAX         ; Сохраняем его в переменную X
ENDM

CALLM MACRO P
    ; Проверяем существование процедуры P
    ; Переход к процедуре P
    call P             ; Вызываем процедуру по имени P
ENDM

RETM MACRO N
    ; Проверяем существование константы N
    ; Возврат из процедуры с указанием количества байт для очистки стека
    ret N              ; Возвращаем из процедуры с очисткой N байт
ENDM

LOOPM MACRO L
    ; Проверяем существование метки L
    ; Организуем цикл
    loop L             ; Выполняем цикл до достижения метки L
ENDM

; Процедура для примера использования CALLM
MyProc PROC
    ; Простая процедура для теста
    mov AX, 1
    ret
MyProc ENDP

LoopLabel:
    ; Место назначения для цикла
    mov CX, 10         ; Пример количества итераций
    loop LoopLabel     ; Цикл по метке
code ends
end start
